@page "/"
@page "/home"
@using HandlebarsDotNet
@using HandlebarsDotNet.Helpers

<h1>Handlebars.Net.Helpers</h1>

<table class="table">
    <thead>
        <tr>
            <th>Input</th>
            <th>Output</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var result in results)
        {
            <tr>
                <td>@result.Input</td>
                <td>@result.Output</td>
            </tr>
        }
    </tbody>
</table>

@code {
    public class TestResult
    {
        public string Input { get; set; }

        public string Output { get; set; }
    }

    private IHandlebars handlebars;

    private List<TestResult> results = new List<TestResult>();

    protected override void OnInitialized()
    {
        handlebars = Handlebars.Create();
        HandlebarsHelpers.Register(handlebars, options => { options.UseCategoryPrefix = false; });

        var tests = new[]
        {
            "{{this}}",
            "{{Constants.Math.PI}}",
            "{{#IsMatch \"Hello\" \"Hello\"}}yes{{else}}no{{/IsMatch}}",
            "{{#IsMatch \"Hello\" \"hello\" 'i'}}yesI{{else}}noI{{/IsMatch}}",
            "{{#StartsWith \"Hello\" \"x\"}}Hi{{else}}Goodbye{{/StartsWith}}",
            "{{Skip ['a', 'b', 'c', 1] 1}}",

            "{{StartsWith \"abc\" \"!def\"}}",
            "{{Append \"abc\" \"!def\"}}",
            "{{Capitalize \"abc def\"}}",
            "{{Ellipsis \"abcfskdagdghsjfjd\" 5}}",
            "{{Reverse \"abc def\"}}",
            "{{Truncate \"abc def\" 166}}",
            "{{Camelcase \"abc def\"}}",
            "{{Pascalcase \"abc def\"}}",
            "{{Uppercase \"abc\"}}",
            "{{Lowercase \"XYZ\"}}",

            "{{Abs -1}}",
            "{{Abs -1.1234}}",
            "{{Sign -1}}",
            "{{Sign " + long.MinValue + "}}",
            "{{Sign -1,1234}}",
            "{{Abs -1,1234}}",

            "{{Min 42 5}}",
            "{{Min 42 5.2}}",
            "{{Min 42.1 5}}",
        };

        foreach (string test in tests)
        {
            var x = DateTime.Now;
            string result = "error>";

            try
            {
                var template = handlebars.Compile(test);
                result = template.Invoke(x);
            }
            catch (Exception e)
            {
                result += e;
            }

            results.Add(new TestResult { Input = test, Output = result });
        }
    }
}